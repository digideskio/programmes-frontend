#!/usr/bin/env python

import os
import json
import subprocess
from string import Template

# component properties
componentConfigFile = "/etc/bake-scripts/config.json"

# application properties
appRoot = "/var/www/programmes-frontend"


def component_config():
    print "Reading component configurations..."

    if not os.path.isfile(componentConfigFile):
        raise IOError("MISSING FILE: " + componentConfigFile)

    with open(componentConfigFile, 'r') as f:
        data = json.load(f)
        return data


def create_cronjob(frequency, user, cronjob_command):
    cronjob_stmt = "(crontab -u " + user + " -l; echo \"" + frequency + " " + cronjob_command + "\" )" + ' | ' + 'crontab -u ' + user + ' - '
    print "Creating Cronjob " + cronjob_stmt
    os.system(cronjob_stmt)


def substitute_data(data):
    return {
        'database_name': data["configuration"]["database_name"],
        'database_user': data["configuration"]["database_user"],
        'database_password': data["secure_configuration"]["database_password"],
        'secret': data["secure_configuration"]["secret"],
        'cosmos_environment': data["environment"],
        'cosmos_component_release': data['release'],
        'redis_endpoint': data["configuration"]["redis_endpoint"],
        'fixture_database_host': data["configuration"].get('fixture_database_host', 'blank'),
        'fixture_database_user': data["configuration"].get('fixture_database_user', 'blank'),
        'fixture_database_password': data["secure_configuration"].get('fixture_database_password', 'blank'),
        'fixture_database_port': data["configuration"].get('fixture_database_port', '3306'),
        'fixture_database_name': data["configuration"].get('fixture_database_name', 'blank'),
        'scenario_database_name': data["configuration"].get('scenario_database_name', 'blank'),
        'fixture_secure_key': data["secure_configuration"].get('fixture_secure_key', 'blank'),
        'receng_video_key': data["secure_configuration"]["receng_video_key"],
        'receng_audio_key': data["secure_configuration"]["receng_audio_key"],
    }

def rewrite_application_parameters(config):
    appParamWriteFile = appRoot + "/app/config/parameters.yml"
    appParamReadFile = appRoot + "/app/config/parameters_prod.yml.dist"

    print "Reading parameter template file..."
    if not os.path.isfile(appParamReadFile):
        raise IOError("MISSING FILE: " + appParamReadFile)

    src = Template(open(appParamReadFile).read())
    parameters = src.substitute(substitute_data(config))

    print "Overwriting " + appParamWriteFile
    with open(appParamWriteFile, 'wt') as config_file:
        config_file.write(parameters)


def rewrite_application_front_controller(symfony_env):
    appFrontControllerFile = appRoot + "/web/app.php"

    content = open(appFrontControllerFile).read()
    content = content.replace(
        "$appEnv = 'prod';",
        "$appEnv = '" + symfony_env + "';"
    )

    print "Overwriting " + appFrontControllerFile
    with open(appFrontControllerFile, 'wt') as front_controller_file:
        front_controller_file.write(content)


def system_tweaks():
    with open("/etc/sysctl.d/80-frontend.conf", "w") as f:
        # This increases the number of waiting connections to a socket.
        # Used in conjunction with "fpm.listen_backlog": 1023
        # in php-fpm.conf to allow bigger queues before failing requests
        f.write("net.core.somaxconn=1024\n")
        # This increases the number of TCP connections the box can handle
        f.write("net.ipv4.ip_local_port_range=11000 63000\n")

    # This increases the max open files for the nginx user, used
    # in conjunction with "nginx.worker_rlimit_nofile": 3000
    # in nginx.conf to allow bigger queues before failing.
    with open("/etc/security/limits.d/80-frontend.conf", "w") as f:
        f.write("nginx soft nofile 3000\n")
        f.write("nginx hard nofile 6000\n")


def regenerate_cache(symfony_env):
    appTmpDir = appRoot + "/var"
    appConsoleFile = appRoot + "/app/console"

    print "Regenerating cache..."
    # Steal the ownership of the tmp directory for a moment, so we can write
    # the new cache files to it
    subprocess.call(['chown', '-R', 'root:root', appTmpDir])

    # The warmup in cache:clear doesn't quite do what you expect so we should
    # call cache:warmup explicitly
    # http://symfony.com/blog/new-in-symfony-3-3-deprecated-cache-clear-with-warmup
    subprocess.call(['php', appConsoleFile, '--env=' + symfony_env, 'cache:clear', '--no-warmup', '--no-debug'])
    subprocess.call(['php', appConsoleFile, '--env=' + symfony_env, 'cache:warmup', '--no-debug'])

    # Give the temp directory back to nginx
    subprocess.call(['chown', '-R', 'nginx:nginx', appTmpDir])


def create_monitoring_cronjob():
    print "Creating montitoring metrics cronjob to run every 5 minutes"
    create_cronjob("*/5 * * * *", "root", "php " + appRoot + "/script/metrics-monitor")


def main():
    print "Setting up configurations..."
    config = component_config()

    symfony_env = "prod"
    if (config["environment"] != 'live'):
        symfony_env = symfony_env + '_' + config["environment"]

    rewrite_application_parameters(config)
    rewrite_application_front_controller(symfony_env)
    regenerate_cache(symfony_env)
    #create_monitoring_cronjob()
    system_tweaks()

if __name__ == '__main__':
    main()
